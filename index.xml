<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://yourenADS.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Sep 2024 16:45:12 +0800</lastBuildDate>
    <atom:link href="https://yourenADS.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>环境配置</title>
      <link>https://yourenADS.github.io/xv6/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 17 Sep 2024 16:45:12 +0800</pubDate>
      <guid>https://yourenADS.github.io/xv6/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h2 id=&#34;docker-配置环境&#34;&gt;docker 配置环境&lt;/h2&gt;&#xA;&lt;p&gt;也可以使用虚拟机来配置环境，由于docker可以直接在本机上进行修改比较方便&lt;/p&gt;&#xA;&lt;h3 id=&#34;配置流程&#34;&gt;配置流程&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;首先git clone lab文件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git clone git://g.csail.mit.edu/xv6-labs-2022&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在项目目录之中，书写dockerfile文件&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用一个基础镜像，例如 Ubuntu&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ubuntu:latest&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 设置环境变量以避免交互式提示&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt; DEBIAN_FRONTEND&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;noninteractive&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get update&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get -y install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建工作目录&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /app&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将本地文件复制到容器中&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; . /app&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于docker相当于将代码与环境一起打包成了一个镜像，即img文件，这样我们直接用img文件运行我们的项目(所谓的容器实际上就是进程而已)&lt;/p&gt;&#xA;&lt;p&gt;随后运行docker命令生成img文件&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker build -t xv6-labs&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样我们就生成了名为xv6-labs的镜像&lt;/p&gt;&#xA;&lt;p&gt;当我们想要进行make时，即可运行&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -v  .:/app -it xv6-labs&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来运行一个容器，以命令行的模式，在app目录之中操作我们的项目，我们的环境就搭好了&lt;/p&gt;</description>
    </item>
    <item>
      <title>第一章 编译概述</title>
      <link>https://yourenADS.github.io/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <pubDate>Mon, 16 Sep 2024 23:18:32 +0800</pubDate>
      <guid>https://yourenADS.github.io/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <description>&lt;h2 id=&#34;翻译和解释&#34;&gt;翻译和解释&lt;/h2&gt;&#xA;&lt;p&gt;面向用户的，面向问题的以及面向对象的语言统称为高级语言。 机器语言和汇编语言为低级语言&lt;/p&gt;&#xA;&lt;p&gt;高级语言编写的程序进行&lt;strong&gt;编译&lt;/strong&gt;过程转为等价的机器语言程序，才能运行。&lt;/p&gt;&#xA;&lt;p&gt;某种高级语言的编译程序加上一些相应的支持用户程序运行的子程序构成了&lt;strong&gt;编译系统&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;翻译程序&#34;&gt;翻译程序&lt;/h3&gt;&#xA;&lt;p&gt;源程序 &amp;ndash;编译程序&amp;ndash;&amp;gt;  目标程序&lt;/p&gt;&#xA;&lt;p&gt;当由高级语言转变为机器语言或者汇编语言，此为&lt;strong&gt;编译程序&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;由汇编语言转为机器语言，此为&lt;strong&gt;汇编程序&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;若直接由源程序执行，给出运行结果，这种翻译器叫做解释器，&lt;strong&gt;解释程序&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;由于有些解释程序效率低，还有一种更有效的方法，就是先用编译程序转为中间代码表示形式，再进行解释程序(伪代码解释器)&lt;/p&gt;&#xA;&lt;h2 id=&#34;编译的阶段和任务&#34;&gt;编译的阶段和任务&lt;/h2&gt;&#xA;&lt;p&gt;编译的过程可以分为分析阶段和综合阶段&lt;/p&gt;&#xA;&lt;h3 id=&#34;分析阶段&#34;&gt;分析阶段&lt;/h3&gt;&#xA;&lt;p&gt;分析阶段根据源语言的定义对源程序进行结构分析和语义分析，从而将程序正文转换为某种中间表示形式&lt;/p&gt;&#xA;&lt;p&gt;编译程序需要定义&lt;strong&gt;数据结构&lt;/strong&gt;（符号表）来保存再分析过程之中识别出来的标识符和有关信息，为语义分析和代码生成提供支持&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yourenADS.github.io/images/image.png&#34; alt=&#34;编译原理的组成&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;1词法分析&#34;&gt;1，词法分析&lt;/h4&gt;&#xA;&lt;p&gt;词法分析是一种线性分析，再扫描源程序时，将字符串分解为单词，再进行转换为记号输出。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Pascal&#34; data-lang=&#34;Pascal&#34;&gt;total:=total+rate*4&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将分为7个单独的单词&lt;/p&gt;&#xA;&lt;p&gt;除此之外，词法分析对某些记号还要增加一个属性值来区分。&lt;/p&gt;&#xA;&lt;p&gt;发现total，产生id，将total放入符号表，id的属性值就是指向total的指针&lt;/p&gt;&#xA;&lt;h4 id=&#34;2语法分析&#34;&gt;2，语法分析&lt;/h4&gt;&#xA;&lt;p&gt;语法分析根据原语言的语法结构，将记号流按层次分组，形成短语&lt;/p&gt;&#xA;&lt;p&gt;表达式定义如下&#xA;&lt;img src=&#34;https://yourenADS.github.io/images/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95.png&#34; alt=&#34;表达式语法&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;源程序的语法短语常用分析树来表示&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yourenADS.github.io/images/%E5%88%86%E6%9E%90%E6%A0%91.png&#34; alt=&#34;分析树&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;3语义分析&#34;&gt;3，语义分析&lt;/h4&gt;&#xA;&lt;p&gt;一个重要任务是类型检查，检查源程序之中每个语法成分的类型是否合乎要求。如运算对象类型，数组下标变量等等&lt;/p&gt;&#xA;&lt;h3 id=&#34;综合阶段&#34;&gt;综合阶段&lt;/h3&gt;&#xA;&lt;p&gt;主要分为 中间代码生成，代码优化以及目标代码生成三个步骤&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yourenADS.github.io/images/%E7%BB%BC%E5%90%88%E9%98%B6%E6%AE%B5.png&#34; alt=&#34;综合阶段&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker</title>
      <link>https://yourenADS.github.io/docker/docker/</link>
      <pubDate>Mon, 16 Sep 2024 14:36:05 +0800</pubDate>
      <guid>https://yourenADS.github.io/docker/docker/</guid>
      <description>&lt;h2 id=&#34;什么是docker&#34;&gt;什么是docker&lt;/h2&gt;&#xA;&lt;p&gt;docker 帮助我们一致地构建，运行并且交付我们的应用程序&lt;/p&gt;&#xA;&lt;p&gt;解决由于环境影响使得应用程序在不同的计算机之上不能运行的类似问题&lt;/p&gt;&#xA;&lt;h2 id=&#34;虚拟机与容器containers&#34;&gt;虚拟机与容器(Containers)&lt;/h2&gt;&#xA;&lt;p&gt;容器container&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;运行应用程序的独立隔离的环境，&lt;/li&gt;&#xA;&lt;li&gt;更加的轻量级，&lt;/li&gt;&#xA;&lt;li&gt;整个主机都用一个操作系统&lt;/li&gt;&#xA;&lt;li&gt;启动便捷快速&lt;/li&gt;&#xA;&lt;li&gt;需要更少的硬件资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;virtual Machine 虚拟机&#xA;对于机器以及物理硬件的抽象，比如在windows系统之下凭借虚拟机我们可以使用linux虚拟机(通过VMware等虚拟管理程序)&#xA;每个主机可以有多个虚拟机,但是其环境不同&lt;/p&gt;&#xA;&lt;p&gt;问题:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每一个虚拟机都有一个完整的操作系统&lt;/li&gt;&#xA;&lt;li&gt;启动十分缓慢&lt;/li&gt;&#xA;&lt;li&gt;资源会很紧张，占用CPU以及内存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;docker-架构&#34;&gt;docker 架构&lt;/h2&gt;&#xA;&lt;p&gt;docker使用用户-服务器模式，所以它有一个客户端组件,来与服务器(docker engine, 运行在后端，用于构建并且运行docker容器)通信&lt;/p&gt;&#xA;&lt;p&gt;由于容器并不含有整个操作系统，所以它共享主机的内核，由于Windows自带windows以及linux内核，我们可以子啊windows上本地运行linux应用程序，windows容器共享windows内核，linux容器共享linux内核&lt;/p&gt;&#xA;&lt;p&gt;docker 将程序和环境一起打包成镜像，所谓的容器实际就是进程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第一章</title>
      <link>https://yourenADS.github.io/os/%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <pubDate>Mon, 16 Sep 2024 11:35:01 +0800</pubDate>
      <guid>https://yourenADS.github.io/os/%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <description></description>
    </item>
    <item>
      <title>Lab_1</title>
      <link>https://yourenADS.github.io/xv6/lab_1/</link>
      <pubDate>Mon, 16 Sep 2024 11:34:33 +0800</pubDate>
      <guid>https://yourenADS.github.io/xv6/lab_1/</guid>
      <description>&lt;h2 id=&#34;sleep&#34;&gt;sleep&lt;/h2&gt;&#xA;&lt;p&gt;题目要求我们参考echo.c等代码来书写sleep.c，实现我们的sleep功能。&#xA;主要是根据argc判断参数的个数，给出提示，若正常参数，则直接调用sleep函数，使用atoi()函数来让参数变为整数，随后调用即可&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;kernel/types.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;kernel/stat.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;user/user.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; exit_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(argc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error: useage: sleep &amp;lt;time&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atoi&lt;/span&gt;(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(exit_state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);  &lt;span style=&#34;color:#75715e&#34;&gt;// 给出错误的情况，若调用错误返回1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pingpong&#34;&gt;pingpong&lt;/h2&gt;&#xA;&lt;p&gt;翻译题目要求即可，pipe()帮助我们实现两个进程之间的通信，在父进程输入a，在子进程读出并且返回a。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;kernel/types.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;kernel/stat.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;user/user.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p2c[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c2p[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pipe(p2c) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fprintf(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error in pipe&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//stderr 的文件描述符为2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pipe(c2p) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fprintf(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error in pipe&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//stderr 的文件描述符为2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork(); &lt;span style=&#34;color:#75715e&#34;&gt;//获取进程号&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fprintf(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error in fock&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        read(p2c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d: received ping&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,getpid());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        write(c2p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        write(p2c[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        read(c2p[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d: received pong&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,getpid());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;primes&#34;&gt;primes&lt;/h2&gt;&#xA;&lt;p&gt;利用进程来筛选质数，其删选的方式是，从2开始，若2之后的数能够被2整除则说明不是质数，被删除，若是质数就利用pipe写入下一个进程。&#xA;每次进程的第一个数一定是质数，也就是我们的评判标志。&#xA;每个进程只输出一个数(第一个数)&#xA;由于xv6的最大子进程限制，所以我们只需要生成2到35即可&#xA;相关示意图在题目之中有&#xA;注意要先判断是否可以读取到父进程传来的数，若接受不到就直接退出，否则可能产生pipe() error&lt;/p&gt;</description>
    </item>
    <item>
      <title>第一章</title>
      <link>https://yourenADS.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <pubDate>Mon, 16 Sep 2024 11:27:36 +0800</pubDate>
      <guid>https://yourenADS.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <description></description>
    </item>
    <item>
      <title>Welcome</title>
      <link>https://yourenADS.github.io/welcome/welcome/</link>
      <pubDate>Mon, 16 Sep 2024 11:04:25 +0800</pubDate>
      <guid>https://yourenADS.github.io/welcome/welcome/</guid>
      <description>&lt;h1 id=&#34;你好&#34;&gt;你好&lt;/h1&gt;&#xA;&lt;p&gt;很高兴与你相遇&lt;/p&gt;</description>
    </item>
    <item>
      <title>blog</title>
      <link>https://yourenADS.github.io/post/blog/</link>
      <pubDate>Sun, 15 Sep 2024 21:17:37 +0800</pubDate>
      <guid>https://yourenADS.github.io/post/blog/</guid>
      <description>&lt;h1 id=&#34;hello&#34;&gt;hello&lt;/h1&gt;&#xA;&lt;p&gt;this is my first blog&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&amp;lt;iostream&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
